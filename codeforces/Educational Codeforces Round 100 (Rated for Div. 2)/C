// ./c-busy-robot.yml
#include "bits/stdc++.h"
using namespace std;

// Defines
#define fs first
#define sn second
#define pb push_back
#define eb emplace_back
#define mpr make_pair
#define mtp make_tuple
#define all(x) (x).begin(), (x).end()
// Basic type definitions
using ll = long long; using ull = unsigned long long; using ld = long double;
using pii = pair<int, int>; using pll = pair<long long, long long>;
#ifdef __GNUG__
// PBDS order statistic tree
#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds; 
template <typename T, class comp = less<T>> using os_tree = tree<T, null_type, comp, rb_tree_tag, tree_order_statistics_node_update>;
template <typename K, typename V, class comp = less<K>> using treemap = tree<K, V, comp, rb_tree_tag, tree_order_statistics_node_update>;
// HashSet
#include <ext/pb_ds/assoc_container.hpp>
template <typename T, class Hash> using hashset = gp_hash_table<T, null_type, Hash>;
template <typename K, typename V, class Hash> using hashmap = gp_hash_table<K, V, Hash>;
const ll RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
struct chash { ll operator()(ll x) const { return x ^ RANDOM; } };
#endif
// More utilities
int SZ(string &v) { return v.length(); }
template <typename C> int SZ(C &v) { return v.size(); }
template <typename C> void UNIQUE(vector<C> &v) { sort(v.begin(), v.end()); v.resize(unique(v.begin(), v.end()) - v.begin()); }
template <typename T, typename U> void maxa(T &a, U b) { a = max(a, b); }
template <typename T, typename U> void mina(T &a, U b) { a = min(a, b); }
const ll INF = 0x3f3f3f3f, LLINF = 0x3f3f3f3f3f3f3f3f;

ostream& operator<<(ostream& out, const pair<ll, int> o) {
    out << "(fs=" << o.fs << ", sn=" << o.sn << ")";
    return out;
}

int sign(int x) {
    return (x > 0) - (x < 0);
}

void solve() {
    int N;
    cin >> N;
    deque<pair<ll, int>> ins;
    for (auto i = 0; i < N; i++) {
        int t, x;
        cin >> t >> x;
        ins.eb(t, x);
    }
    ins.eb(LLINF, -INF);
    int ans = 0;
    ll t = 0, x = 0;
    while (SZ(ins) > 1) {
        auto is = ins.front(); ins.pop_front();
        int ot = t, ox = x;
        t = is.fs + abs(x - is.sn);
        x = is.sn;
        // cout<<"[on]: "; cout<<"is="<<(is)<<", "; cout<<"ot="<<(ot)<<", "; cout<<"ox="<<(ox)<<", "; cout<<"t="<<(t)<<", "; cout<<"x="<<(x)<<", "; cout << endl; // db l:on,is,ot,ox,t,x
        ans += t <= ins.front().fs;
        // cout<<"ans="<<(ans)<<", "; cout << endl; // db ans
        while (SZ(ins) > 1 && ins.front().fs < t) {
            auto disc = ins.front(); ins.pop_front();
            auto disc2 = ins.front();
            int dir = sign(is.sn - ox), l = ox + dir * (disc.fs - is.fs), r = ox + dir * min(t - is.fs, disc2.fs - is.fs);
            if (l > r) swap(l, r);
            // cout<<"[skip]: "; cout<<"disc="<<(disc)<<", "; cout<<"disc2="<<(disc2)<<", "; cout<<"dir="<<(dir)<<", "; cout<<"l="<<(l)<<", "; cout<<"r="<<(r)<<", "; cout << endl; // db l:skip,disc,disc2,dir,l,r
            ans += l <= disc.sn && disc.sn <= r;
            // cout<<"ans="<<(ans)<<", "; cout << endl; // db ans
        }
    }
    cout << (ans) << '\n';
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int T;
    cin >> T;
    while (T--) {
        // Input
        
        solve();

        // Reset
    }
}
