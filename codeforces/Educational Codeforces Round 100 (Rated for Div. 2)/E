// ./e-plan-of-lectures.yml
#include "bits/stdc++.h"
using namespace std;

// Defines
#define fs first
#define sn second
#define pb push_back
#define eb emplace_back
#define mpr make_pair
#define mtp make_tuple
#define all(x) (x).begin(), (x).end()
// Basic type definitions
using ll = long long; using ull = unsigned long long; using ld = long double;
using pii = pair<int, int>; using pll = pair<long long, long long>;
#ifdef __GNUG__
// PBDS order statistic tree
#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds; 
template <typename T, class comp = less<T>> using os_tree = tree<T, null_type, comp, rb_tree_tag, tree_order_statistics_node_update>;
template <typename K, typename V, class comp = less<K>> using treemap = tree<K, V, comp, rb_tree_tag, tree_order_statistics_node_update>;
// HashSet
#include <ext/pb_ds/assoc_container.hpp>
template <typename T, class Hash> using hashset = gp_hash_table<T, null_type, Hash>;
template <typename K, typename V, class Hash> using hashmap = gp_hash_table<K, V, Hash>;
const ll RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
struct chash { ll operator()(ll x) const { return x ^ RANDOM; } };
#endif
// More utilities
int SZ(string &v) { return v.length(); }
template <typename C> int SZ(C &v) { return v.size(); }
template <typename C> void UNIQUE(vector<C> &v) { sort(v.begin(), v.end()); v.resize(unique(v.begin(), v.end()) - v.begin()); }
template <typename T, typename U> void maxa(T &a, U b) { a = max(a, b); }
template <typename T, typename U> void mina(T &a, U b) { a = min(a, b); }
const ll INF = 0x3f3f3f3f, LLINF = 0x3f3f3f3f3f3f3f3f;

const int MN = 3e5 + 1;
int N, K, rt,
    indeg[MN], outdeg[MN], par[MN], to[MN], chainno[MN], indegchain[MN];
vector<int> g[MN], cg[MN], ans;
vector<vector<int>> chains;
bool done[MN];

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    cin >> (N) >> (K);
    for (auto i = 1; i <= N; i++) {
        int x;
        cin >> x;
        if (!x)
            rt = i;
        else {
            par[i] = x;
            g[x].pb(i);
        }
    }
    vector<pii> __p;
    for (auto i = 0; i < K; i++) {
        int x, y;
        cin >> x >> y;
        to[x] = y;
        __p.eb(x, y);
        outdeg[x]++;
        indeg[y]++;
    }
    for (auto i = 1; i <= N; i++) {
        if (indeg[i] > 1 || outdeg[i] > 1) {
            cout << (0) << '\n';
            return 0;
        }
    }
    int ecnt = 0, ccnt = 0;
    for (auto i = 1; i <= N; i++) {
        if (indeg[i] == 0) {
            vector<int> cchain;
            for (int c = i; c; c = to[c])
                cchain.pb(c);

            // add to ds/etc.
            chains.pb(cchain);
            for (auto x : cchain)
                chainno[x] = ccnt;
            ecnt += SZ(cchain) - 1;

            ccnt++;
        }
    }
    if (ecnt < K) {
        cout << (0) << '\n';
        return 0;
    }

    // get chain graph
    for (auto i = 1; i <= N; i++)
        if (par[i]) {
            int a = chainno[par[i]], b = chainno[i];
            if (a != b)
                cg[a].pb(b);
        }
    for (auto i = 0; i < ccnt; i++) {
        UNIQUE(cg[i]);
        for (auto to : cg[i])
            indegchain[to]++;
    }

    // do toposort
    queue<int> q;
    for (auto i = 0; i < ccnt; i++)
        if (indegchain[i] == 0)
            q.push(i);
    while (!q.empty()) {
        int c = q.front(); q.pop();
        for (auto x : chains[c]) {
            if (par[x] != 0 && !done[par[x]]) {
                cout << (0) << '\n';
                return 0;
            }
            ans.pb(x);
            done[x] = true;
        }
        for (auto to : cg[c]) {
            if (--indegchain[to] == 0)
                q.push(to);
        }
    }

    if (SZ(ans) != N) {
        cout << (0) << '\n';
        return 0;
    }
    for (auto x : ans) cout << x << ' ';
    cout << '\n';

    return 0;
}

