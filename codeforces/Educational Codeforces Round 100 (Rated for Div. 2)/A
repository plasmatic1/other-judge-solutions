// ./a-dungeon.yml
#include "bits/stdc++.h"
using namespace std;

// Defines
#define fs first
#define sn second
#define pb push_back
#define eb emplace_back
#define mpr make_pair
#define mtp make_tuple
#define all(x) (x).begin(), (x).end()
// Basic type definitions
using ll = long long; using ull = unsigned long long; using ld = long double;
using pii = pair<int, int>; using pll = pair<long long, long long>;
#ifdef __GNUG__
// PBDS order statistic tree
#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds; 
template <typename T, class comp = less<T>> using os_tree = tree<T, null_type, comp, rb_tree_tag, tree_order_statistics_node_update>;
template <typename K, typename V, class comp = less<K>> using treemap = tree<K, V, comp, rb_tree_tag, tree_order_statistics_node_update>;
// HashSet
#include <ext/pb_ds/assoc_container.hpp>
template <typename T, class Hash> using hashset = gp_hash_table<T, null_type, Hash>;
template <typename K, typename V, class Hash> using hashmap = gp_hash_table<K, V, Hash>;
const ll RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
struct chash { ll operator()(ll x) const { return x ^ RANDOM; } };
#endif
// More utilities
int SZ(string &v) { return v.length(); }
template <typename C> int SZ(C &v) { return v.size(); }
template <typename C> void UNIQUE(vector<C> &v) { sort(v.begin(), v.end()); v.resize(unique(v.begin(), v.end()) - v.begin()); }
template <typename T, typename U> void maxa(T &a, U b) { a = max(a, b); }
template <typename T, typename U> void mina(T &a, U b) { a = min(a, b); }
const ll INF = 0x3f3f3f3f, LLINF = 0x3f3f3f3f3f3f3f3f;

bool check(int _A[3], int cnt) {
    int A[3]; copy(_A, _A + 3, A);
    int oc = cnt * 6;
    for (auto i = 0; i < 3; i++) {
        int rem = min(A[i] - cnt, oc);
        oc -= rem;
        A[i] -= rem;
    }
    return oc == 0;
}

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);

    int T;
    cin >> T;
    while (T--) {
        int A[3];
        for (auto i = 0; i < 3; i++)
            cin >> (A[i]);
        sort(A, A + 3);

        int tsum = A[0] + A[1] + A[2];
        if (tsum % 9)
            cout << ("NO") << '\n';
        else {
            int super = tsum / 9;
            if (A[0] < super || A[1] < super || A[2] < super)
                cout << ("NO") << '\n';
            else
                cout << ("YES") << '\n';
        }

        // int l = 1, r = 1e8+1;
        // while (l + 1 < r) {
        //     int mid = (l + r) / 2;
        //     if (check(A, mid))
        //         l = mid;
        //     else
        //         r = mid;
        // }
        //
        // int totshot = 6 * l + 3 * l;
        // cout<<"A=["; for(int __i=0; __i<(3); __i++)cout<<A[__i]<<", "; cout<<"], ";cout<<"l="<<(l)<<", "; cout<<"totshot="<<(totshot)<<", "; cout << endl; // db A:3:A,l,totshot
        // cout << (totshot == A[0] + A[1] + A[2] ? "YES" : "NO") << '\n';
    }

    return 0;
}

