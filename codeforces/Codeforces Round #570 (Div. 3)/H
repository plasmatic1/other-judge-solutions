n, k = map(int, input().split())
s = '{' + input()
dp = [[0] * (n + 1) for _ in range(n + 1)]

# dp
dp[0][0] = 1
oa = ord('a')
for i in range(1, n + 1):
    for j in range(1, n + 1):
        hold = [0] * 30
        for l in range(0, i): # Transition from dp[l][j - 1]
            let = ord(s[l]) - oa;
            # db(i); db(j); db(dp[i][j]); db(dp[l][j - 1]); db(hold[let]); dbln;
            dp[i][j] += dp[l][j - 1] - hold[let]

            hold[let] = dp[l][j - 1]

        # dblb("ret"); db(i); db(j); db(dp[i][j]); dbln;

# sum costs
tot = 0
for i in range(n, -1, -1):
    cost = n - i
    dpsum = 0
    hold = [0] * 30
    for j in range(0, n + 1):
        let = ord(s[j]) - oa
        dpsum += dp[j][i] - hold[let]
        hold[let] = dp[j][i]

    sub = min(k, dpsum)
    # print(f'i={i} dpsum={dpsum}')

    tot += sub * cost
    k -= sub

if k > 0:
    print(-1)
else:
    print(tot)
