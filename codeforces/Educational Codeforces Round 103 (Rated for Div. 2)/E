// ./e-pattern-matching.yml
#include "bits/stdc++.h"
using namespace std;

// Defines
#define fs first
#define sn second
#define pb push_back
#define eb emplace_back
#define mpr make_pair
#define mtp make_tuple
#define all(x) (x).begin(), (x).end()
// Basic type definitions
using ll = long long; using ull = unsigned long long; using ld = long double;
using pii = pair<int, int>; using pll = pair<long long, long long>;
#ifdef __GNUG__
// PBDS order statistic tree
#include <ext/pb_ds/assoc_container.hpp> // Common file 
#include <ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds; 
template <typename T, class comp = less<T>> using os_tree = tree<T, null_type, comp, rb_tree_tag, tree_order_statistics_node_update>;
template <typename K, typename V, class comp = less<K>> using treemap = tree<K, V, comp, rb_tree_tag, tree_order_statistics_node_update>;
// HashSet
#include <ext/pb_ds/assoc_container.hpp>
template <typename T, class Hash> using hashset = gp_hash_table<T, null_type, Hash>;
template <typename K, typename V, class Hash> using hashmap = gp_hash_table<K, V, Hash>;
const ll RANDOM = chrono::high_resolution_clock::now().time_since_epoch().count();
struct chash { ll operator()(ll x) const { return x ^ RANDOM; } };
#endif
// More utilities
int SZ(string &v) { return v.length(); }
template <typename C> int SZ(C &v) { return v.size(); }
template <typename C> void UNIQUE(vector<C> &v) { sort(v.begin(), v.end()); v.resize(unique(v.begin(), v.end()) - v.begin()); }
template <typename T, typename U> void maxa(T &a, U b) { a = max(a, b); }
template <typename T, typename U> void mina(T &a, U b) { a = min(a, b); }
const ll INF = 0x3f3f3f3f, LLINF = 0x3f3f3f3f3f3f3f3f;

const int MN = 1e5 + 1;
int N, M, K,
    mt[MN];
string pat[MN], str[MN];

unordered_map<string, vector<int>> ind[16];

// toposort
vector<int> g[MN], ord;
int indeg[MN];
queue<int> q;

int main() {
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    
    cin >> (N) >> (M) >> (K);
    for (auto i = 0; i < N; i++) {
        cin >> pat[i];
        int msk = 0;
        for (auto j = 0; j < K; j++)
            if (pat[i][j] != '_')
                msk |= 1 << j;
        string rem;
        for (auto c : pat[i])
            if (c != '_')
                rem += c;
        ind[msk][rem].pb(i);
        // cout<<"i="<<(i)<<", "; cout<<"msk="<<(bitset<4>(msk))<<", "; cout<<"rem="<<(rem)<<", "; cout<<"pat[i]="<<(pat[i])<<", "; cout << endl; // db i,b:4:msk,rem,pat[i]
    }
    for (auto i = 0; i < M; i++) {
        cin >> str[i] >> mt[i];
        mt[i]--;

        vector<int> mat;
        for (auto j = 0; j < 1<<K; j++) {
            string ext;
            for (auto k = 0; k < K; k++)
                if ((j >> k) & 1)
                    ext += str[i][k];
            auto &m = ind[j][ext];
            // cout<<"i="<<(i)<<", "; cout<<"j="<<(bitset<4>(j))<<", "; cout<<"ext="<<(ext)<<", "; cout << endl; // db i,b:4:j,ext
            mat.insert(mat.end(), all(m));
        }

        bool found = false;
        for (auto x : mat) {
            if (x == mt[i]) {
                found = true;
                break;
            }
        }

        // cout<<"i="<<(i)<<", "; cout << "mat=["; for (auto __x:mat)cout<<__x<<", "; cout<<"], "; cout << endl; // db i,I:mat

        if (!found) {
            cout << ("NO") << '\n';
            return 0;
        }

        for (auto x : mat)
            if (x != mt[i])
                g[mt[i]].pb(x);
    }

    // toposort
    for (auto i = 0; i < N; i++)
        for (auto to : g[i])
            indeg[to]++;
    for (auto i = 0; i < N; i++)
        if (!indeg[i])
            q.push(i);
    while (!q.empty()) {
        int c = q.front(); q.pop();
        ord.pb(c);
        for (auto to : g[c])
            if (--indeg[to] == 0)
                q.push(to);
    }

    // output
    for (auto i = 0; i < N; i++) {
        if (indeg[i] > 0) {
            cout << ("NO") << '\n';
            return 0;
        }
    }
    cout << ("YES") << '\n';
    for (auto x : ord) cout << (x+1) << ' ';
    cout << '\n';

    return 0;
}

